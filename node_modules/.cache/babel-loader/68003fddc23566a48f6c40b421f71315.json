{"ast":null,"code":"var _jsxFileName = \"/Users/kevinblair/Desktop/projects/react/typescript-sandbox/src/components/Todos.tsx\";\nimport React from \"react\";\nimport TodoComponent from \"./Todo\"; // React.FC specifies that Todos is a React Functional Component\n// In <>, we define our own props\n// if items is not passed or is passed but it is not a string array, we will get an error\n// to make items, optional, add a '?' after e.g. React.FC<{ items?: string[] }>\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todos = props => {\n  // after changing to items: Todo[], we are saying that items will be an array of objects that meets the Todo class definition\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: props.items.map(item => /*#__PURE__*/_jsxDEV(TodoComponent, {\n      text: item.text\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Todos;\nexport default Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/Users/kevinblair/Desktop/projects/react/typescript-sandbox/src/components/Todos.tsx"],"names":["React","TodoComponent","Todos","props","items","map","item","text","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,aAAP,MAA0B,QAA1B,C,CAEA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAkC,GAAIC,KAAD,IAAW;AACpD;AACA,sBACE;AAAA,cACGA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,iBACf,QAAC,aAAD;AAA6B,MAAA,IAAI,EAAEA,IAAI,CAACC;AAAxC,OAAoBD,IAAI,CAACE,EAAzB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CATD;;KAAMN,K;AAWN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\n\nimport Todo from \"../models/todo\";\nimport TodoComponent from \"./Todo\";\n\n// React.FC specifies that Todos is a React Functional Component\n// In <>, we define our own props\n// if items is not passed or is passed but it is not a string array, we will get an error\n// to make items, optional, add a '?' after e.g. React.FC<{ items?: string[] }>\nconst Todos: React.FC<{ items: Todo[] }> = (props) => {\n  // after changing to items: Todo[], we are saying that items will be an array of objects that meets the Todo class definition\n  return (\n    <ul>\n      {props.items.map((item) => (\n        <TodoComponent key={item.id} text={item.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default Todos;\n"]},"metadata":{},"sourceType":"module"}